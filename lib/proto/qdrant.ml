(************************************************)
(*       AUTOGENERATED FILE - DO NOT EDIT!      *)
(************************************************)
(* Generated by: ocaml-protoc-plugin            *)
(* https://github.com/issuu/ocaml-protoc-plugin *)
(************************************************)
(*
  Source: qdrant.proto
  Syntax: proto3
  Parameters:
    debug=false
    annot=''
    opens=[Google_types]
    int64_as_int=true
    int32_as_int=true
    fixed_as_int=false
    singleton_record=false
*)

open Ocaml_protoc_plugin.Runtime [@@warning "-33"]
open Google_types [@@warning "-33"]
(**/**)
module Imported'modules = struct
  module Collections_service = Collections_service
  module Points_service = Points_service
  module Snapshots_service = Snapshots_service
end
(**/**)
module Qdrant = struct
  module rec HealthCheckRequest : sig
    val name': unit -> string
    type t = unit 
    val make : unit -> t
    val to_proto: t -> Runtime'.Writer.t
    val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
  end = struct 
    let name' () = "qdrant.qdrant.HealthCheckRequest"
    type t = unit
    let make =
      fun  () -> 
      
      ()
    
    let to_proto =
      let apply = fun ~f:f' () -> f' []  in
      let spec = Runtime'.Serialize.C.( nil ) in
      let serialize = Runtime'.Serialize.serialize [] (spec) in
      fun t -> apply ~f:serialize t
    
    let from_proto =
      let constructor = fun _extensions  -> () in
      let spec = Runtime'.Deserialize.C.( nil ) in
      let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
      fun writer -> deserialize writer |> Runtime'.Result.open_error
    
  end
  and HealthCheckReply : sig
    val name': unit -> string
    type t = { title: string; version: string } 
    val make : ?title:string -> ?version:string -> unit -> t
    val to_proto: t -> Runtime'.Writer.t
    val from_proto: Runtime'.Reader.t -> (t, [> Runtime'.Result.error]) result
  end = struct 
    let name' () = "qdrant.qdrant.HealthCheckReply"
    type t = { title: string; version: string }
    let make =
      fun ?title ?version () -> 
      let title = match title with Some v -> v | None -> {||} in
      let version = match version with Some v -> v | None -> {||} in
      { title; version }
    
    let to_proto =
      let apply = fun ~f:f' { title; version } -> f' [] title version in
      let spec = Runtime'.Serialize.C.( basic (1, string, proto3) ^:: basic (2, string, proto3) ^:: nil ) in
      let serialize = Runtime'.Serialize.serialize [] (spec) in
      fun t -> apply ~f:serialize t
    
    let from_proto =
      let constructor = fun _extensions title version -> { title; version } in
      let spec = Runtime'.Deserialize.C.( basic (1, string, proto3) ^:: basic (2, string, proto3) ^:: nil ) in
      let deserialize = Runtime'.Deserialize.deserialize [] spec constructor in
      fun writer -> deserialize writer |> Runtime'.Result.open_error
    
  end
  module Qdrant = struct
    module HealthCheck = struct
      let name = "/qdrant.Qdrant/HealthCheck"
      module Request = HealthCheckRequest
      module Response = HealthCheckReply
    end
    let healthCheck = 
      (module HealthCheckRequest : Runtime'.Service.Message with type t = HealthCheckRequest.t ), 
      (module HealthCheckReply : Runtime'.Service.Message with type t = HealthCheckReply.t )
    
  end
end